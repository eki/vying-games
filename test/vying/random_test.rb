# frozen_string_literal: true

require_relative '../test_helper'

class TestRandomNumberGenerator < Minitest::Test
  include Vying

  def test_initialize
    rng = RandomNumberGenerator.new 1234
    rng2 = RandomNumberGenerator.new 1234
    rng3 = RandomNumberGenerator.new 5678

    assert_equal(1234, rng.seed)
    assert_equal(1234, rng2.seed)
    assert_equal(5678, rng3.seed)

    assert_equal(0, rng.count)
    assert_equal(0, rng2.count)
    assert_equal(0, rng3.count)
  end

  def test_repeatability
    rng = RandomNumberGenerator.new 1234
    rng2 = RandomNumberGenerator.new 1234

    assert_equal(rng.rand(2000), rng2.rand(2000))
    assert_equal(rng.rand(1000), rng2.rand(1000))
    assert_equal(rng.rand(1000), rng2.rand(1000))
    assert_equal(rng.rand(7000), rng2.rand(7000))

    rng = RandomNumberGenerator.new 1234
    rng2 = RandomNumberGenerator.new 5678

    # Note, this is actually a very *bad* test because there's no guarantee
    # the first 4 numbers drawn for two different seeds *can't* be the same

    refute_equal(rng.rand(2000), rng2.rand(2000))
    refute_equal(rng.rand(1000), rng2.rand(1000))
    refute_equal(rng.rand(1000), rng2.rand(1000))
    refute_equal(rng.rand(7000), rng2.rand(7000))
  end

  def test_dup
    rng = RandomNumberGenerator.new 1234

    rng.rand

    rng2 = rng.dup

    assert_equal(rng.count, rng2.count)
    assert_equal(rng.seed, rng2.seed)
    assert_equal(rng.rand(1000), rng2.rand(1000))
    assert_equal(rng2.rand(1000), rng.rand(1000))
  end

  def test_marshal
    rng = RandomNumberGenerator.new 1234

    rng.rand

    rng2 = Marshal.load(Marshal.dump(rng))

    assert_equal(rng.count, rng2.count)
    assert_equal(rng.seed, rng2.seed)
    assert_equal(rng.rand(1000), rng2.rand(1000))
    assert_equal(rng2.rand(1000), rng.rand(1000))
  end

  def test_inspect
    assert_equal('#<RNG seed: 1234, count: 0>',
      RandomNumberGenerator.new(1234).inspect)
  end

  def test_rand_limit_seed_0
    a = [5, 0, 3, 3, 7, 9, 3, 5, 2, 4, 7, 6, 8, 8, 1, 6, 7, 7, 8, 1, 5, 9, 8,
9, 4, 3, 0, 3, 5, 0, 2, 3, 8, 1, 3, 3, 3, 7, 0, 1, 9, 9, 0, 4, 7, 3, 2, 7, 2,
0, 0, 4, 5, 5, 6, 8, 4, 1, 4, 9, 8, 1, 1, 7, 9, 9, 3, 6, 7, 2, 0, 3, 5, 9, 4,
4, 6, 4, 4, 3, 4, 4, 8, 4, 3, 7, 5, 5, 0, 1, 5, 9, 3, 0, 5, 0, 1, 2, 4, 2, 0,
3, 2, 0, 7, 5, 9, 0, 2, 7, 2, 9, 2, 3, 3, 2, 3, 4, 1, 2, 9, 1, 4, 6, 8, 2, 3,
0, 0, 6, 0, 6, 3, 3, 8, 8, 8, 2, 3, 2, 0, 8, 8, 3, 8, 2, 8, 4, 3, 0, 4, 3, 6,
9, 8, 0, 8, 5, 9, 0, 9, 6, 5, 3, 1, 8, 0, 4, 9, 6, 5, 7, 8, 8, 9, 2, 8, 6, 6,
9, 1, 6, 8, 8, 3, 2, 3, 6, 3, 6, 5, 7, 0, 8, 4, 6, 5, 8, 2, 3, 9, 7, 5, 3, 4,
5, 3, 3, 7, 9, 9, 9, 7, 3, 2, 3, 9, 7, 7, 5, 1, 2, 2, 8, 1, 5, 8, 4, 0, 2, 5,
5, 0, 8, 1, 1, 0, 3, 8, 8, 4, 4, 0, 9, 3, 7, 3, 2, 1, 1, 2, 1, 4, 2, 5, 5, 5,
2, 5, 7, 7, 6, 1, 6, 7, 2, 3, 1, 9, 5, 9, 9, 2, 0, 9, 1, 9, 0, 6, 0, 4, 8, 4,
3, 3, 8, 8, 7, 0, 3, 8, 7, 7, 1, 8, 4, 7, 0, 4, 9, 0, 6, 4, 2, 4, 6, 3, 3, 7,
8, 5, 0, 8, 5, 4, 7, 4, 1, 3, 3, 9, 2, 5, 2, 3, 5, 7, 2, 7, 1, 6, 5, 0, 0, 3,
1, 9, 9, 6, 6, 7, 8, 8, 7, 0, 8, 6, 8, 9, 8, 3, 6, 1, 7, 4, 9, 2, 0, 8, 2, 7,
8, 4, 4, 1, 7, 6, 9, 4, 1, 5, 9, 7, 1, 3, 5, 7, 3, 6, 6, 7, 9, 1, 9, 6, 0, 3,
8, 4, 1, 4, 5, 0, 3, 1, 4, 4, 4, 0, 0, 8, 4, 6, 9, 3, 3, 2, 1, 2, 1, 3, 4, 1,
1, 0, 7, 8, 4, 3, 5, 6, 3, 2, 9, 8, 1, 4, 0, 8, 3, 9, 5, 5, 1, 7, 8, 6, 4, 7,
3, 5, 3, 6, 4, 7, 3, 0, 5, 9, 3, 7, 5, 5, 8, 0, 8, 3, 6, 9, 3, 2, 7, 0, 3, 0,
3, 6, 1, 9, 2, 9, 4, 9, 1, 3, 2, 4, 9, 7, 4, 9, 4, 1, 2, 7, 2, 3, 9, 7, 6, 6,
2, 3, 6, 0, 8, 0, 7, 6, 5, 9, 6, 5, 2, 7, 1, 9, 2, 2, 5, 6, 4, 2, 2, 1, 0, 9,
0, 2, 8, 3, 0, 8, 8, 1, 0, 5, 8, 2, 3, 5, 3, 8, 6, 4, 6, 3, 6, 2, 6, 5, 5, 9,
4, 6, 5, 1, 3, 3, 8, 9, 5, 5, 6, 0, 9, 7, 5, 1, 5, 6, 6, 8, 7, 5, 3, 2, 9, 9,
3, 2, 5, 4, 1, 5, 8, 3, 5, 8, 4, 1, 7, 8, 1, 2, 1, 1, 7, 5, 0, 4, 1, 1, 6, 6,
0, 2, 3, 7, 9, 2, 4, 9, 0, 6, 9, 2, 4, 7, 3, 0, 5, 4, 0, 2, 3, 1, 7, 1, 3, 4,
1, 7, 4, 0, 2, 7, 4, 0, 2, 6, 9, 2, 4, 9, 9, 5, 4, 4, 9, 8, 1, 5, 7, 0, 1, 3,
9, 2, 8, 2, 4, 8, 2, 9, 8, 7, 8, 2, 3, 3, 6, 0, 3, 6, 3, 9, 6, 3, 2, 2, 2, 6,
4, 6, 0, 4, 9, 2, 1, 6, 1, 7, 5, 6, 1, 6, 6, 6, 6, 2, 5, 2, 2, 3, 2, 9, 3, 8,
5, 4, 5, 1, 5, 8, 2, 9, 9, 5, 6, 4, 0, 8, 5, 5, 5, 1, 0, 0, 0, 0, 0, 7, 6, 3,
5, 4, 3, 4, 5, 1, 3, 6, 7, 4, 0, 0, 7, 3, 3, 0, 0, 9, 4, 4, 5, 8, 8, 0, 1, 5,
9, 9, 6, 1, 4, 0, 4, 7, 7, 7, 6, 2, 6, 0, 2, 7, 7, 2, 6, 1, 3, 7, 0, 5, 4, 5,
5, 3, 8, 0, 1, 5, 4, 1, 5, 0, 6, 8, 8, 6, 3, 4, 4, 3, 6, 5, 9, 8, 1, 3, 8, 1,
5, 8, 0, 3, 7, 1, 7, 8, 0, 7, 5, 9, 9, 6, 8, 7, 5, 9, 1, 0, 0, 5, 6, 3, 6, 1,
7, 7, 0, 7, 6, 0, 4, 2, 7, 5, 2, 8, 5, 6, 6, 4, 1, 5, 4, 5, 5, 6, 3, 8, 1, 4,
2, 9, 7, 4, 1, 8, 2, 3, 3, 4, 1, 6, 2, 5, 4, 9, 1, 5, 9, 4, 5, 7, 4, 4, 2, 2,
1, 3, 0, 1, 9, 1, 6, 9, 8, 6, 3, 0, 7, 3, 2, 5, 9, 7, 3, 4, 7, 6, 7, 3, 6, 9,
3, 7, 1, 3, 7, 8, 8, 4, 5, 3, 6, 9, 6, 2, 9, 3, 5, 7, 9, 0, 7, 1, 2, 5, 0, 5,
8, 9, 8, 2, 5, 3, 1, 7, 3, 8, 5, 5, 1, 9, 7, 2, 1, 0, 1, 0, 1, 1, 6, 8, 8, 3,
2, 0, 7, 4, 6, 0, 5, 3, 3, 9, 4, 9, 0, 6, 5, 3, 0, 0, 1, 2, 0, 2, 2, 9, 6, 7,
8, 9, 8, 2, 4, 7, 7, 5, 7, 2, 4, 1, 1, 1, 7, 9, 0, 9, 0, 2, 1, 4, 6, 0, 6, 6,
2, 8, 6, 6, 5, 2, 5, 0, 3, 9, 9, 7, 0, 4, 1, 3, 5, 7, 6, 2, 7, 3, 4, 9, 7, 0,
0, 1, 8, 3, 5, 0, 1, 1, 3, 7, 9, 3, 7, 0, 2, 4, 4, 6, 0, 1, 7, 6, 5, 5, 7, 3,
6, 8, 8, 2, 1, 0, 8, 7, 7, 0, 4, 8, 0, 4, 5, 7, 2, 4, 9, 7, 5, 0, 4, 9, 4, 0,
2, 5, 5, 3, 0, 0, 1, 9, 9, 2, 1, 0, 1, 6, 3, 4, 3, 6, 4, 2, 3, 6, 3, 3, 8, 1,
3, 3, 1, 5, 3, 6, 4, 8, 5, 7, 1, 8, 2, 0, 0, 4, 2, 1, 2, 2, 3, 4, 7, 5, 1, 3,
1, 0, 1, 4, 0, 2, 1, 3, 1, 4, 7, 5, 6, 9, 2, 5, 2, 2, 1, 3, 8, 3, 0, 7, 3, 8,
2, 4, 3, 1, 6, 5, 8, 4, 3, 6, 5, 3, 7, 8, 8, 3, 7, 8, 5, 7, 2, 7, 8, 0, 7, 4,
8, 4, 4, 0, 4, 8, 0, 0, 4, 7, 3, 7, 7, 2, 2, 1, 7, 0, 7, 5, 9, 7, 1, 1, 2, 4,
1, 4, 5, 8, 2, 1, 6, 3, 0, 3, 9, 5, 1, 3, 7, 1, 1, 7, 9, 4, 2, 0, 3, 2, 4, 0,
0, 9, 3, 8, 3, 0, 4, 4, 0, 2, 5, 5, 8, 2, 7, 3, 6, 1, 0, 2, 2, 5, 5, 1, 2, 8,
7, 3, 7, 3, 1, 0, 1, 0, 8, 8, 5, 3, 3, 1, 0, 6, 1, 6, 9, 5, 7, 0, 1, 4, 9, 5,
1, 6, 5]

    rng = RandomNumberGenerator.new(0)

    a.each_with_index do |n, i|
      assert_equal(n, rng.rand(10))
    end
  end

  def test_rand_limit_seed_987654321
    a = [7, 2, 7, 6, 0, 1, 9, 7, 9, 3, 6, 1, 6, 8, 4, 6, 0, 2, 8, 4, 6, 2, 0,
7, 9, 8, 2, 6, 1, 5, 0, 2, 9, 2, 2, 4, 5, 3, 2, 4, 1, 3, 4, 7, 8, 0, 5, 8, 7,
4, 2, 4, 7, 7, 2, 1, 5, 2, 5, 6, 9, 0, 0, 6, 3, 3, 6, 7, 2, 4, 3, 2, 5, 1, 9,
3, 7, 7, 5, 4, 0, 6, 3, 1, 4, 3, 8, 4, 2, 0, 2, 7, 1, 4, 5, 8, 8, 2, 2, 4, 4,
4, 1, 1, 8, 5, 1, 9, 3, 6, 8, 9, 6, 4, 5, 5, 4, 5, 0, 7, 7, 5, 8, 0, 8, 5, 2,
1, 2, 9, 5, 7, 9, 4, 0, 3, 6, 5, 8, 9, 3, 2, 3, 1, 1, 8, 6, 5, 2, 6, 3, 1, 9,
6, 1, 1, 9, 0, 8, 3, 0, 8, 5, 3, 9, 7, 2, 8, 0, 6, 5, 5, 1, 1, 0, 5, 0, 7, 7,
5, 5, 0, 1, 2, 0, 3, 2, 3, 6, 4, 9, 8, 3, 4, 7, 3, 5, 0, 0, 0, 4, 5, 4, 2, 3,
9, 4, 0, 4, 6, 6, 6, 7, 5, 8, 9, 0, 8, 7, 6, 4, 7, 8, 3, 8, 7, 7, 3, 9, 4, 4,
1, 3, 3, 2, 9, 5, 2, 5, 9, 2, 4, 3, 5, 8, 1, 1, 4, 5, 0, 0, 8, 9, 3, 9, 5, 0,
6, 3, 2, 5, 4, 9, 1, 9, 2, 8, 9, 9, 9, 9, 0, 1, 1, 8, 7, 4, 7, 1, 6, 3, 4, 4,
7, 2, 8, 4, 7, 7, 2, 7, 4, 1, 6, 2, 2, 1, 8, 4, 3, 8, 0, 5, 8, 1, 6, 0, 5, 9,
5, 6, 6, 6, 9, 2, 2, 4, 3, 2, 2, 3, 3, 7, 0, 5, 5, 2, 3, 5, 6, 3, 5, 5, 9, 4,
8, 8, 3, 2, 8, 0, 0, 1, 8, 2, 5, 7, 0, 6, 5, 3, 9, 3, 9, 8, 5, 3, 0, 7, 3, 5,
0, 1, 9, 3, 6, 7, 1, 9, 5, 7, 4, 5, 0, 1, 9, 5, 1, 0, 8, 0, 8, 6, 6, 8, 0, 8,
6, 4, 8, 7, 8, 4, 5, 9, 6, 8, 4, 2, 1, 3, 2, 2, 1, 0, 2, 6, 4, 1, 1, 6, 3, 0,
3, 3, 3, 8, 7, 4, 8, 6, 8, 4, 1, 1, 2, 8, 9, 0, 3, 4, 5, 7, 5, 8, 3, 5, 0, 2,
2, 7, 3, 3, 8, 5, 8, 6, 8, 9, 1, 0, 5, 9, 1, 5, 6, 0, 2, 7, 5, 5, 8, 7, 6, 5,
7, 9, 6, 2, 0, 1, 8, 8, 7, 9, 8, 0, 0, 0, 3, 0, 4, 1, 6, 3, 3, 2, 1, 4, 6, 2,
7, 6, 5, 6, 2, 7, 9, 9, 9, 9, 5, 2, 9, 2, 9, 2, 9, 4, 3, 7, 5, 4, 0, 6, 7, 2,
0, 8, 6, 8, 8, 7, 8, 8, 7, 5, 4, 1, 9, 7, 5, 7, 2, 0, 1, 8, 5, 3, 4, 3, 3, 1,
9, 6, 4, 0, 2, 5, 6, 4, 6, 0, 3, 8, 9, 1, 4, 1, 4, 1, 1, 2, 8, 7, 7, 1, 3, 2,
0, 8, 5, 5, 1, 5, 9, 4, 8, 6, 4, 2, 2, 5, 0, 4, 4, 3, 9, 9, 0, 1, 7, 0, 4, 2,
7, 2, 3, 5, 5, 4, 6, 4, 7, 7, 1, 1, 1, 7, 4, 6, 5, 4, 6, 0, 8, 7, 8, 2, 6, 8,
5, 9, 5, 6, 8, 3, 3, 2, 5, 4, 3, 7, 6, 9, 5, 6, 8, 6, 7, 0, 7, 8, 9, 7, 2, 3,
4, 1, 4, 6, 8, 0, 3, 9, 5, 6, 1, 6, 4, 1, 8, 3, 4, 4, 3, 8, 8, 1, 9, 2, 4, 0,
9, 1, 9, 5, 4, 5, 7, 9, 6, 1, 4, 1, 5, 2, 0, 3, 7, 9, 7, 6, 2, 8, 1, 6, 3, 4,
9, 5, 7, 2, 7, 6, 8, 8, 0, 0, 0, 2, 1, 9, 9, 8, 5, 5, 5, 1, 6, 8, 0, 4, 6, 0,
0, 0, 0, 2, 9, 4, 5, 4, 7, 8, 3, 6, 3, 8, 0, 4, 0, 6, 9, 6, 2, 4, 4, 0, 0, 0,
2, 6, 1, 9, 9, 6, 5, 8, 0, 2, 3, 8, 9, 5, 1, 5, 2, 6, 3, 6, 1, 1, 9, 1, 0, 2,
3, 5, 8, 4, 2, 5, 5, 6, 1, 1, 6, 2, 2, 8, 5, 6, 2, 1, 3, 7, 3, 2, 5, 6, 1, 1,
2, 8, 2, 6, 5, 6, 2, 1, 0, 6, 9, 9, 5, 5, 6, 6, 5, 9, 3, 9, 6, 4, 7, 2, 2, 6,
3, 4, 8, 5, 3, 7, 4, 9, 2, 9, 5, 9, 5, 6, 9, 9, 2, 3, 9, 2, 4, 6, 3, 1, 0, 8,
9, 0, 9, 1, 4, 2, 0, 8, 6, 9, 0, 8, 7, 1, 4, 9, 8, 5, 5, 7, 6, 1, 3, 9, 8, 2,
4, 8, 4, 2, 0, 5, 8, 8, 1, 0, 1, 6, 7, 7, 9, 6, 8, 9, 8, 8, 2, 9, 9, 2, 1, 8,
2, 6, 7, 0, 2, 4, 0, 0, 3, 5, 2, 2, 3, 1, 0, 8, 2, 8, 9, 5, 2, 6, 3, 2, 0, 2,
4, 5, 8, 5, 2, 2, 6, 3, 0, 7, 0, 4, 4, 6, 4, 6, 8, 8, 6, 3, 4, 6, 4, 8, 3, 9,
3, 5, 7, 2, 6, 0, 5, 7, 4, 0, 5, 4, 6, 2, 2, 4, 3, 9, 1, 5, 1, 2, 3, 9, 3, 5,
9, 3, 9, 5, 6, 7, 3, 0, 0, 4, 5, 9, 5, 0, 7, 9, 5, 3, 2, 1, 0, 0, 1, 3, 9, 1,
6, 3, 2, 9, 5, 4, 0, 2, 3, 6, 9, 0, 6, 0, 8, 4, 5, 2, 1, 0, 8, 1, 0, 7, 6, 4,
8, 7, 0, 6, 9, 0, 2, 9, 1, 1, 8, 4, 3, 7, 7, 3, 9, 0, 7, 9, 2, 9, 1, 5, 3, 4,
5, 8, 6, 8, 1, 2, 4, 9, 1, 4, 4, 4, 6, 4, 4, 6, 6, 4, 6, 9, 1, 0, 3, 8, 1, 6,
1, 3, 9, 6, 4, 4, 3, 9, 8, 9, 9, 4, 5, 8, 2, 9, 3, 6, 3, 2, 7, 0, 4, 0, 2, 1,
3, 4, 2, 3, 0, 0, 3, 3, 7, 4, 1, 7, 4, 4, 4, 7, 0, 4, 4, 4, 9, 4, 7, 6, 3, 3,
9, 4, 5, 8, 7, 5, 6, 4, 6, 8, 8, 7, 4, 3, 4, 3, 1, 6, 9, 5, 0, 6, 8, 6, 2, 7,
1, 0, 5, 2, 3, 7, 1, 4, 8, 3, 2, 1, 9, 9, 4, 7, 1, 4, 4, 2, 2, 5, 7, 9, 9, 6,
9, 0, 0, 9, 8, 8, 4, 1, 3, 5, 4, 4, 4, 1, 7, 1, 7, 0, 8, 8, 3, 2, 6, 3, 3, 6,
9, 0, 1, 8, 0, 6, 0, 6, 3, 5, 1, 3, 3, 7, 6, 3, 9, 9, 5, 9, 2, 0, 1, 4, 3, 7,
3, 8, 0, 7, 4, 6, 4, 3, 7, 2, 0, 2, 4, 3, 0, 5, 6, 7, 3, 3, 8, 8, 2, 3, 2, 8,
3, 9, 7, 4, 0, 7, 7, 8, 2, 2, 9, 4, 5, 4, 8, 4, 5, 7, 6, 6, 1, 4, 3, 3, 2, 5,
5, 0, 5]

    rng = RandomNumberGenerator.new(987_654_321)

    a.each_with_index do |n, i|
      assert_equal(n, rng.rand(10))
    end
  end

  def test_rand_limit_seed_2_to_the_power_of_32
    assert_raises(RangeError) { RandomNumberGenerator.new(2**32) }
  end

  def test_rand
    a = [0.497663558693603, 0.460859388578683, 0.563284086063504,
0.32737783761695, 0.0280573521740735, 0.6411990551278, 0.0197969221044332,
0.688652759650722, 0.603897346183658, 0.250767871970311, 0.912647918565199,
0.338224105304107, 0.239467412000522, 0.171717283083126, 0.0207048752345145,
0.167315068421885, 0.876376140164211, 0.861806006170809, 0.0370230888947845,
0.184731183340773, 0.980214223265648, 0.948025652905926, 0.845173970563337,
0.0142656024545431, 0.292996165342629, 0.562984887976199, 0.63556570885703,
0.699699639109895, 0.504515070701018, 0.436107149813324, 0.962808865820989,
0.86684180656448, 0.235044483095407, 0.132080890703946, 0.952960237395018,
0.507184943417087, 0.344892158405855, 0.948566816980019, 0.500847085844725,
0.230998581973836, 0.647215585922822, 0.360488516045734, 0.976956644793972,
0.914761934662238, 0.795371108455583, 0.158041243907064, 0.0405981969088316,
0.832760135876015, 0.408775417366996, 0.143709016032517, 0.135129925794899,
0.620650773402303, 0.981669030152261, 0.384358233772218, 0.151256704237312,
0.0855860835872591, 0.15184753225185, 0.293365004239604, 0.696936009451747,
0.12517073075287, 0.644254614366218, 0.847402697661892, 0.352280160179362,
0.500995587790385, 0.479571650503203, 0.414847420994192, 0.430869167204946,
0.766268324805424, 0.476905367802829, 0.442649834556505, 0.318768370896578,
0.135826855665073, 0.817668424919248, 0.731354433810338, 0.805146209895611,
0.965691961813718, 0.178323952015489, 0.436353695346043, 0.189662124728784,
0.0336823740508407, 0.364105961751193, 0.814220930682495, 0.230639897286892,
0.115483130095527, 0.664372209925205, 0.651255169417709, 0.960781082976609,
0.817904698429629, 0.374082422349602, 0.729569856310263, 0.0498579130508006,
0.18636386259459, 0.948763779364526, 0.911990764318034, 0.692324388306588,
0.501451671123505, 0.668048097984865, 0.288915685378015, 0.0922150632832199,
0.834192704409361]

    rng = RandomNumberGenerator.new(4278)

    a.each do |n|
      assert((n - rng.rand).abs < 0.0001)
    end
  end

end
